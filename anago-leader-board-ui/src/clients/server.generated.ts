//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    createGame(body: GameForm | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/game";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateGame(_response);
        });
    }

    protected processCreateGame(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getGame(id: string): Promise<Game> {
        let url_ = this.baseUrl + "/api/game/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGame(_response);
        });
    }

    protected processGetGame(response: Response): Promise<Game> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Game.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game>(null as any);
    }

    /**
     * @return Success
     */
    getGames(): Promise<Game[]> {
        let url_ = this.baseUrl + "/api/games";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGames(_response);
        });
    }

    protected processGetGames(response: Response): Promise<Game[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Game.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Game[]>(null as any);
    }

    /**
     * @return Success
     */
    deleteGames(): Promise<void> {
        let url_ = this.baseUrl + "/api/games";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteGames(_response);
        });
    }

    protected processDeleteGames(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param name (optional) 
     * @param avatar (optional) 
     * @return Success
     */
    createPlayer(name: string | undefined, avatar: FileParameter | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/player";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (name === null || name === undefined)
            throw new Error("The parameter 'name' cannot be null.");
        else
            content_.append("Name", name.toString());
        if (avatar === null || avatar === undefined)
            ''
        else
            content_.append("Avatar", avatar.data, avatar.fileName ? avatar.fileName : "Avatar");

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePlayer(_response);
        });
    }

    protected processCreatePlayer(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getPlayers(): Promise<Player[]> {
        let url_ = this.baseUrl + "/api/players";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPlayers(_response);
        });
    }

    protected processGetPlayers(response: Response): Promise<Player[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Player.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Player[]>(null as any);
    }

    /**
     * @return Success
     */
    getPlayer(id: string): Promise<Player> {
        let url_ = this.baseUrl + "/api/player/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPlayer(_response);
        });
    }

    protected processGetPlayer(response: Response): Promise<Player> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Player.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Player>(null as any);
    }

    /**
     * @return Success
     */
    getAvatar(id: string): Promise<void> {
        let url_ = this.baseUrl + "/api/player/{id}/avatar";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAvatar(_response);
        });
    }

    protected processGetAvatar(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Game implements IGame {
    id?: string | undefined;
    firstTeam?: TeamPerformance;
    secondTeam?: TeamPerformance;
    createdAt?: Date;

    constructor(data?: IGame) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstTeam = _data["firstTeam"] ? TeamPerformance.fromJS(_data["firstTeam"]) : <any>undefined;
            this.secondTeam = _data["secondTeam"] ? TeamPerformance.fromJS(_data["secondTeam"]) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Game {
        data = typeof data === 'object' ? data : {};
        let result = new Game();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstTeam"] = this.firstTeam ? this.firstTeam.toJSON() : <any>undefined;
        data["secondTeam"] = this.secondTeam ? this.secondTeam.toJSON() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IGame {
    id?: string | undefined;
    firstTeam?: TeamPerformance;
    secondTeam?: TeamPerformance;
    createdAt?: Date;
}

export class GameForm implements IGameForm {
    firstTeamForm?: TeamPerformanceForm;
    secondTeamForm?: TeamPerformanceForm;

    constructor(data?: IGameForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstTeamForm = _data["firstTeamForm"] ? TeamPerformanceForm.fromJS(_data["firstTeamForm"]) : <any>undefined;
            this.secondTeamForm = _data["secondTeamForm"] ? TeamPerformanceForm.fromJS(_data["secondTeamForm"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GameForm {
        data = typeof data === 'object' ? data : {};
        let result = new GameForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstTeamForm"] = this.firstTeamForm ? this.firstTeamForm.toJSON() : <any>undefined;
        data["secondTeamForm"] = this.secondTeamForm ? this.secondTeamForm.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGameForm {
    firstTeamForm?: TeamPerformanceForm;
    secondTeamForm?: TeamPerformanceForm;
}

export class Player implements IPlayer {
    readonly id?: string | undefined;
    readonly name?: string | undefined;
    readonly rating?: number;
    readonly numberOfGames?: number;
    readonly numberOfWins?: number;
    readonly numberOfLosses?: number;
    readonly goalsFor?: number;
    readonly goalsAgainst?: number;
    readonly createdAt?: Date;

    constructor(data?: IPlayer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            (<any>this).name = _data["name"];
            (<any>this).rating = _data["rating"];
            (<any>this).numberOfGames = _data["numberOfGames"];
            (<any>this).numberOfWins = _data["numberOfWins"];
            (<any>this).numberOfLosses = _data["numberOfLosses"];
            (<any>this).goalsFor = _data["goalsFor"];
            (<any>this).goalsAgainst = _data["goalsAgainst"];
            (<any>this).createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Player {
        data = typeof data === 'object' ? data : {};
        let result = new Player();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["rating"] = this.rating;
        data["numberOfGames"] = this.numberOfGames;
        data["numberOfWins"] = this.numberOfWins;
        data["numberOfLosses"] = this.numberOfLosses;
        data["goalsFor"] = this.goalsFor;
        data["goalsAgainst"] = this.goalsAgainst;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPlayer {
    id?: string | undefined;
    name?: string | undefined;
    rating?: number;
    numberOfGames?: number;
    numberOfWins?: number;
    numberOfLosses?: number;
    goalsFor?: number;
    goalsAgainst?: number;
    createdAt?: Date;
}

export class PlayerPerformance implements IPlayerPerformance {
    playerId?: string | undefined;
    name?: string | undefined;
    oldRating?: number;
    newRating?: number;

    constructor(data?: IPlayerPerformance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerId = _data["playerId"];
            this.name = _data["name"];
            this.oldRating = _data["oldRating"];
            this.newRating = _data["newRating"];
        }
    }

    static fromJS(data: any): PlayerPerformance {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerPerformance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        data["name"] = this.name;
        data["oldRating"] = this.oldRating;
        data["newRating"] = this.newRating;
        return data;
    }
}

export interface IPlayerPerformance {
    playerId?: string | undefined;
    name?: string | undefined;
    oldRating?: number;
    newRating?: number;
}

export class TeamPerformance implements ITeamPerformance {
    firstPlayer?: PlayerPerformance;
    secondPlayer?: PlayerPerformance;
    goals?: number;

    constructor(data?: ITeamPerformance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstPlayer = _data["firstPlayer"] ? PlayerPerformance.fromJS(_data["firstPlayer"]) : <any>undefined;
            this.secondPlayer = _data["secondPlayer"] ? PlayerPerformance.fromJS(_data["secondPlayer"]) : <any>undefined;
            this.goals = _data["goals"];
        }
    }

    static fromJS(data: any): TeamPerformance {
        data = typeof data === 'object' ? data : {};
        let result = new TeamPerformance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstPlayer"] = this.firstPlayer ? this.firstPlayer.toJSON() : <any>undefined;
        data["secondPlayer"] = this.secondPlayer ? this.secondPlayer.toJSON() : <any>undefined;
        data["goals"] = this.goals;
        return data;
    }
}

export interface ITeamPerformance {
    firstPlayer?: PlayerPerformance;
    secondPlayer?: PlayerPerformance;
    goals?: number;
}

export class TeamPerformanceForm implements ITeamPerformanceForm {
    firstPlayerId?: string | undefined;
    secondPlayerId?: string | undefined;
    goals?: number;

    constructor(data?: ITeamPerformanceForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstPlayerId = _data["firstPlayerId"];
            this.secondPlayerId = _data["secondPlayerId"];
            this.goals = _data["goals"];
        }
    }

    static fromJS(data: any): TeamPerformanceForm {
        data = typeof data === 'object' ? data : {};
        let result = new TeamPerformanceForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstPlayerId"] = this.firstPlayerId;
        data["secondPlayerId"] = this.secondPlayerId;
        data["goals"] = this.goals;
        return data;
    }
}

export interface ITeamPerformanceForm {
    firstPlayerId?: string | undefined;
    secondPlayerId?: string | undefined;
    goals?: number;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}